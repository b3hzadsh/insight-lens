name: Build and Release Flutter App

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:  # Allow manual run

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build-type: [apk, appbundle]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Verify Flutter installation
        run: flutter doctor -v

      # Optional: uncomment to ensure no test fails before release
      # - name: Run tests
      #   run: flutter test --no-pub

      - name: Decode and create keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          mkdir -p android/app
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/key.jks
          cat <<EOF > android/key.properties
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEY_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=key.jks
          EOF

      - name: Build APK (split per ABI)
        if: matrix.build-type == 'apk'
        run: flutter build apk --release --split-per-abi
      
      - name: Build App Bundle
        if: matrix.build-type == 'appbundle'
        run: flutter build appbundle --release

      - name: List build outputs
        run: find build/app/outputs -name "*.apk" -o -name "*.aab" | sort
          
      - name: Upload APK artifacts
        if: matrix.build-type == 'apk'
        uses: actions/upload-artifact@v4
        with:
          name: apk-files
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: Upload AAB artifacts
        if: matrix.build-type == 'appbundle'
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle
          path: build/app/outputs/bundle/release/*.aab
          retention-days: 30

  create-release:
    needs: build-android
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: List downloaded files
        run: find . -name "*.apk" -o -name "*.aab" | sort
        
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ðŸš€ Flutter App Release  
            **Downloads:**  
            - [Universal APK](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/app-arm64-v8a-release.apk)
            - [App Bundle (AAB)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/app-release.aab)
          artifacts: "**/*.apk,**/*.aab"
          token: ${{ secrets.GITHUB_TOKEN }}
